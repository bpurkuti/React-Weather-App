{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","today","hours","getHours","minutes","getMinutes","buildTime","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAGMA,G,MACA,oCADAA,EAEC,2CA2HQC,MAxHf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,KAmEd,OACC,qBACCC,UACwB,oBAAhBF,EAAQG,KACZH,EAAQG,KAAKC,KAAO,GACnB,WACA,WACD,WANL,SASC,iCACC,qBAAKF,UAAU,aAAf,SACC,uBACCG,KAAK,OACLH,UAAU,aACVI,YAAY,WACZC,SAAU,SAACC,GAAD,OAAOT,EAASS,EAAEC,OAAOC,QACnCA,MAAOZ,EACPa,WAjFU,SAACC,GACC,UAAZA,EAAIC,KACPC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACxDoB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACNjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WA6EW,oBAAhBlB,EAAQG,KACf,gCACC,sBAAKD,UAAU,eAAf,UACC,sBAAKA,UAAU,WAAf,UACEF,EAAQqB,KADV,KACkBrB,EAAQsB,IAAIC,QAAS,OAEvC,sBAAKrB,UAAU,OAAf,cA9Ec,SAACsB,GACpB,IAwBIC,EAVO,CACV,SACA,SACA,UACA,YACA,WACA,SACA,YAGcD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA1BS,CACZ,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAckBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,aAAkBI,EAAlB,YAA2BF,EAA3B,YAAmCI,GAgDNE,CAAY,IAAIC,YAGzC,sBAAKhC,UAAU,cAAf,UAMC,sBAAKA,UAAU,OAAf,UACEiC,KAAKC,MAA2B,EAApBpC,EAAQG,KAAKC,KAAY,EAAI,IAD3C,WAIA,sBAAKF,UAAU,UAAf,cAA2BF,EAAQA,QAAQ,GAAGG,QAE9C,qBAAKD,UAAU,OAAf,SA5DY,SAACmC,GAChB,IAAIC,EAAQD,EAAME,WACdC,EAAUH,EAAMI,aActB,OAXMD,EAAQ,KAEVA,EAAU,IAAIA,GAGdF,EAAQ,GACJA,EAAQ,GAAK,IAAME,EAAU,MAE7BF,EAAQ,IAAME,EAAU,MA+CJE,CAAU,IAAIR,cAIvC,SC7GUS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3c5837a9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst api = {\n\tkey: \"2f038f971e8c36ad567cb03c3234dbb6\",\n\tbase: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n\tconst [query, setQuery] = useState(\"\");\n\tconst [weather, setWeather] = useState({});\n\n\tconst search = (evt) => {\n\t\tif (evt.key === \"Enter\") {\n\t\t\tfetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n\t\t\t\t.then((res) => res.json())\n\t\t\t\t.then((result) => {\n\t\t\t\t\tsetWeather(result);\n\t\t\t\t\tsetQuery(\"\");\n\t\t\t\t\tconsole.log(result);\n\t\t\t\t});\n\t\t}\n\t};\n\n\tconst dateBuilder = (d) => {\n\t\tlet months = [\n\t\t\t\"January\",\n\t\t\t\"February\",\n\t\t\t\"March\",\n\t\t\t\"April\",\n\t\t\t\"May\",\n\t\t\t\"June\",\n\t\t\t\"July\",\n\t\t\t\"August\",\n\t\t\t\"September\",\n\t\t\t\"October\",\n\t\t\t\"November\",\n\t\t\t\"December\",\n\t\t];\n\t\tlet days = [\n\t\t\t\"Sunday\",\n\t\t\t\"Monday\",\n\t\t\t\"Tuesday\",\n\t\t\t\"Wednesday\",\n\t\t\t\"Thursday\",\n\t\t\t\"Friday\",\n\t\t\t\"Saturday\",\n\t\t];\n\n\t\tlet day = days[d.getDay()];\n\t\tlet date = d.getDate();\n\t\tlet month = months[d.getMonth()];\n\t\tlet year = d.getFullYear();\n\n\t\treturn `${day}, ${month} ${date} ${year}`;\n\t};\n\n\tconst buildTime = (today) => {\n    let hours = today.getHours();\n    let minutes = today.getMinutes();\n    let time = 0;\n    \n    if (minutes<10)\n    {\n      minutes = '0'+minutes;\n    }\n\n\t\tif (hours > 12) {\n\t\t\ttime = hours - 12 + \":\" + minutes + \" PM\";\n\t\t} else {\n\t\t\ttime = hours + \":\" + minutes + \" AM\";\n\t\t}\n\n\t\treturn time;\n\t};\n\treturn (\n\t\t<div\n\t\t\tclassName={\n\t\t\t\ttypeof weather.main != \"undefined\"\n\t\t\t\t\t? weather.main.temp > 12\n\t\t\t\t\t\t? \"App warm\"\n\t\t\t\t\t\t: \"App cold\"\n\t\t\t\t\t: \"App warm\"\n\t\t\t}\n\t\t>\n\t\t\t<main>\n\t\t\t\t<div className=\"search-box\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"search-bar\"\n\t\t\t\t\t\tplaceholder=\"Search..\"\n\t\t\t\t\t\tonChange={(e) => setQuery(e.target.value)}\n\t\t\t\t\t\tvalue={query}\n\t\t\t\t\t\tonKeyPress={search}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{typeof weather.main != \"undefined\" ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className=\"location-box\">\n\t\t\t\t\t\t\t<div className=\"location\">\n\t\t\t\t\t\t\t\t{weather.name}, {weather.sys.country}{\" \"}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"date\"> {dateBuilder(new Date())}</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"weather-box\">\n\n              {/* Celcius */}\n\t\t\t\t\t\t\t{/* <div className=\"temp\">{Math.round(weather.main.temp)}°C</div> */}\n\n              {/* Farenheiit */}\n\t\t\t\t\t\t\t<div className=\"temp\">\n\t\t\t\t\t\t\t\t{Math.round((weather.main.temp * 9) / 5 + 32)}°F\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"weather\"> {weather.weather[0].main}</div>\n\n\t\t\t\t\t\t\t<div className=\"time\">{buildTime(new Date())}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t\"\"\n\t\t\t\t)}\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}